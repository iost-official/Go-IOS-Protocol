// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc/apis.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import block "github.com/iost-official/go-iost/core/block"
import contract "github.com/iost-official/go-iost/core/contract"
import event "github.com/iost-official/go-iost/core/event"
import tx "github.com/iost-official/go-iost/core/tx"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HashReq struct {
	// transaction hash
	Hash                 string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HashReq) Reset()         { *m = HashReq{} }
func (m *HashReq) String() string { return proto.CompactTextString(m) }
func (*HashReq) ProtoMessage()    {}
func (*HashReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{0}
}
func (m *HashReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HashReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HashReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HashReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashReq.Merge(dst, src)
}
func (m *HashReq) XXX_Size() int {
	return m.Size()
}
func (m *HashReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HashReq.DiscardUnknown(m)
}

var xxx_messageInfo_HashReq proto.InternalMessageInfo

func (m *HashReq) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type BlockByHashReq struct {
	// block hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// complete means return the whole block or just blockhead+txhash_list
	Complete             bool     `protobuf:"varint,2,opt,name=complete,proto3" json:"complete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockByHashReq) Reset()         { *m = BlockByHashReq{} }
func (m *BlockByHashReq) String() string { return proto.CompactTextString(m) }
func (*BlockByHashReq) ProtoMessage()    {}
func (*BlockByHashReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{1}
}
func (m *BlockByHashReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockByHashReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockByHashReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockByHashReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockByHashReq.Merge(dst, src)
}
func (m *BlockByHashReq) XXX_Size() int {
	return m.Size()
}
func (m *BlockByHashReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockByHashReq.DiscardUnknown(m)
}

var xxx_messageInfo_BlockByHashReq proto.InternalMessageInfo

func (m *BlockByHashReq) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BlockByHashReq) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

type BlockByNumReq struct {
	// block number
	Num int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	// complete means return the whole block or just blockhead+txhash_list
	Complete             bool     `protobuf:"varint,2,opt,name=complete,proto3" json:"complete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockByNumReq) Reset()         { *m = BlockByNumReq{} }
func (m *BlockByNumReq) String() string { return proto.CompactTextString(m) }
func (*BlockByNumReq) ProtoMessage()    {}
func (*BlockByNumReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{2}
}
func (m *BlockByNumReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockByNumReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockByNumReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockByNumReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockByNumReq.Merge(dst, src)
}
func (m *BlockByNumReq) XXX_Size() int {
	return m.Size()
}
func (m *BlockByNumReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockByNumReq.DiscardUnknown(m)
}

var xxx_messageInfo_BlockByNumReq proto.InternalMessageInfo

func (m *BlockByNumReq) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *BlockByNumReq) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

type GetBalanceReq struct {
	// account ID
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// useLongestChain means whether geting the balance also from pending blocks(in the longest chain)
	UseLongestChain      bool     `protobuf:"varint,2,opt,name=useLongestChain,proto3" json:"useLongestChain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBalanceReq) Reset()         { *m = GetBalanceReq{} }
func (m *GetBalanceReq) String() string { return proto.CompactTextString(m) }
func (*GetBalanceReq) ProtoMessage()    {}
func (*GetBalanceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{3}
}
func (m *GetBalanceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBalanceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBalanceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetBalanceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBalanceReq.Merge(dst, src)
}
func (m *GetBalanceReq) XXX_Size() int {
	return m.Size()
}
func (m *GetBalanceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBalanceReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetBalanceReq proto.InternalMessageInfo

func (m *GetBalanceReq) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GetBalanceReq) GetUseLongestChain() bool {
	if m != nil {
		return m.UseLongestChain
	}
	return false
}

type GetStateReq struct {
	// the key in the StateDB
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// get the value from StateDB,field is needed if StateDB[key] is a map.(we get StateDB[key][field] in this case)
	Field                string   `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStateReq) Reset()         { *m = GetStateReq{} }
func (m *GetStateReq) String() string { return proto.CompactTextString(m) }
func (*GetStateReq) ProtoMessage()    {}
func (*GetStateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{4}
}
func (m *GetStateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetStateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStateReq.Merge(dst, src)
}
func (m *GetStateReq) XXX_Size() int {
	return m.Size()
}
func (m *GetStateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStateReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetStateReq proto.InternalMessageInfo

func (m *GetStateReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *GetStateReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type GetContractReq struct {
	// contract id
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetContractReq) Reset()         { *m = GetContractReq{} }
func (m *GetContractReq) String() string { return proto.CompactTextString(m) }
func (*GetContractReq) ProtoMessage()    {}
func (*GetContractReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{5}
}
func (m *GetContractReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetContractReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetContractReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetContractReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetContractReq.Merge(dst, src)
}
func (m *GetContractReq) XXX_Size() int {
	return m.Size()
}
func (m *GetContractReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetContractReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetContractReq proto.InternalMessageInfo

func (m *GetContractReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type RawTxReq struct {
	// the rawdata of a tx
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawTxReq) Reset()         { *m = RawTxReq{} }
func (m *RawTxReq) String() string { return proto.CompactTextString(m) }
func (*RawTxReq) ProtoMessage()    {}
func (*RawTxReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{6}
}
func (m *RawTxReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RawTxReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RawTxReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RawTxReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawTxReq.Merge(dst, src)
}
func (m *RawTxReq) XXX_Size() int {
	return m.Size()
}
func (m *RawTxReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RawTxReq.DiscardUnknown(m)
}

var xxx_messageInfo_RawTxReq proto.InternalMessageInfo

func (m *RawTxReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SubscribeReq struct {
	// type of event:0-TransactionResult,1-ContractEvent,2-ContractUserEvent,3-ContractSystemEvent
	Topics               []event.Event_Topic `protobuf:"varint,1,rep,packed,name=topics,enum=event.Event_Topic" json:"topics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SubscribeReq) Reset()         { *m = SubscribeReq{} }
func (m *SubscribeReq) String() string { return proto.CompactTextString(m) }
func (*SubscribeReq) ProtoMessage()    {}
func (*SubscribeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{7}
}
func (m *SubscribeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubscribeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeReq.Merge(dst, src)
}
func (m *SubscribeReq) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeReq.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeReq proto.InternalMessageInfo

func (m *SubscribeReq) GetTopics() []event.Event_Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

type VersionInfoRes struct {
	// build time and git hash
	BuildTime            string   `protobuf:"bytes,1,opt,name=buildTime,proto3" json:"buildTime,omitempty"`
	GitHash              string   `protobuf:"bytes,2,opt,name=gitHash,proto3" json:"gitHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionInfoRes) Reset()         { *m = VersionInfoRes{} }
func (m *VersionInfoRes) String() string { return proto.CompactTextString(m) }
func (*VersionInfoRes) ProtoMessage()    {}
func (*VersionInfoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{8}
}
func (m *VersionInfoRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionInfoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionInfoRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VersionInfoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionInfoRes.Merge(dst, src)
}
func (m *VersionInfoRes) XXX_Size() int {
	return m.Size()
}
func (m *VersionInfoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionInfoRes.DiscardUnknown(m)
}

var xxx_messageInfo_VersionInfoRes proto.InternalMessageInfo

func (m *VersionInfoRes) GetBuildTime() string {
	if m != nil {
		return m.BuildTime
	}
	return ""
}

func (m *VersionInfoRes) GetGitHash() string {
	if m != nil {
		return m.GitHash
	}
	return ""
}

type HeightRes struct {
	// the height of the blockchain
	Height               int64    `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeightRes) Reset()         { *m = HeightRes{} }
func (m *HeightRes) String() string { return proto.CompactTextString(m) }
func (*HeightRes) ProtoMessage()    {}
func (*HeightRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{9}
}
func (m *HeightRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeightRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeightRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HeightRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeightRes.Merge(dst, src)
}
func (m *HeightRes) XXX_Size() int {
	return m.Size()
}
func (m *HeightRes) XXX_DiscardUnknown() {
	xxx_messageInfo_HeightRes.DiscardUnknown(m)
}

var xxx_messageInfo_HeightRes proto.InternalMessageInfo

func (m *HeightRes) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type GetBalanceRes struct {
	// the queried balance
	Balance              int64    `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBalanceRes) Reset()         { *m = GetBalanceRes{} }
func (m *GetBalanceRes) String() string { return proto.CompactTextString(m) }
func (*GetBalanceRes) ProtoMessage()    {}
func (*GetBalanceRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{10}
}
func (m *GetBalanceRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBalanceRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBalanceRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetBalanceRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBalanceRes.Merge(dst, src)
}
func (m *GetBalanceRes) XXX_Size() int {
	return m.Size()
}
func (m *GetBalanceRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBalanceRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetBalanceRes proto.InternalMessageInfo

func (m *GetBalanceRes) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type GetNetIDRes struct {
	// NetID
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNetIDRes) Reset()         { *m = GetNetIDRes{} }
func (m *GetNetIDRes) String() string { return proto.CompactTextString(m) }
func (*GetNetIDRes) ProtoMessage()    {}
func (*GetNetIDRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{11}
}
func (m *GetNetIDRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNetIDRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNetIDRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetNetIDRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNetIDRes.Merge(dst, src)
}
func (m *GetNetIDRes) XXX_Size() int {
	return m.Size()
}
func (m *GetNetIDRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNetIDRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetNetIDRes proto.InternalMessageInfo

func (m *GetNetIDRes) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type GetStateRes struct {
	// the value of the corresponding key in the StateDB
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStateRes) Reset()         { *m = GetStateRes{} }
func (m *GetStateRes) String() string { return proto.CompactTextString(m) }
func (*GetStateRes) ProtoMessage()    {}
func (*GetStateRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{12}
}
func (m *GetStateRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStateRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStateRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetStateRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStateRes.Merge(dst, src)
}
func (m *GetStateRes) XXX_Size() int {
	return m.Size()
}
func (m *GetStateRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStateRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetStateRes proto.InternalMessageInfo

func (m *GetStateRes) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type GetContractRes struct {
	// contract id
	Value                *contract.Contract `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetContractRes) Reset()         { *m = GetContractRes{} }
func (m *GetContractRes) String() string { return proto.CompactTextString(m) }
func (*GetContractRes) ProtoMessage()    {}
func (*GetContractRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{13}
}
func (m *GetContractRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetContractRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetContractRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetContractRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetContractRes.Merge(dst, src)
}
func (m *GetContractRes) XXX_Size() int {
	return m.Size()
}
func (m *GetContractRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetContractRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetContractRes proto.InternalMessageInfo

func (m *GetContractRes) GetValue() *contract.Contract {
	if m != nil {
		return m.Value
	}
	return nil
}

type SendRawTxRes struct {
	// the hash of the received transaction
	Hash                 string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendRawTxRes) Reset()         { *m = SendRawTxRes{} }
func (m *SendRawTxRes) String() string { return proto.CompactTextString(m) }
func (*SendRawTxRes) ProtoMessage()    {}
func (*SendRawTxRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{14}
}
func (m *SendRawTxRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendRawTxRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendRawTxRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SendRawTxRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRawTxRes.Merge(dst, src)
}
func (m *SendRawTxRes) XXX_Size() int {
	return m.Size()
}
func (m *SendRawTxRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRawTxRes.DiscardUnknown(m)
}

var xxx_messageInfo_SendRawTxRes proto.InternalMessageInfo

func (m *SendRawTxRes) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type GasRes struct {
	// not support yet
	Gas                  uint64   `protobuf:"varint,1,opt,name=gas,proto3" json:"gas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GasRes) Reset()         { *m = GasRes{} }
func (m *GasRes) String() string { return proto.CompactTextString(m) }
func (*GasRes) ProtoMessage()    {}
func (*GasRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{15}
}
func (m *GasRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GasRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasRes.Merge(dst, src)
}
func (m *GasRes) XXX_Size() int {
	return m.Size()
}
func (m *GasRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GasRes.DiscardUnknown(m)
}

var xxx_messageInfo_GasRes proto.InternalMessageInfo

func (m *GasRes) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

type TxRes struct {
	// the queried transaction
	TxRaw *tx.TxRaw `protobuf:"bytes,1,opt,name=txRaw" json:"txRaw,omitempty"`
	// transaction hash
	Hash                 []byte   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxRes) Reset()         { *m = TxRes{} }
func (m *TxRes) String() string { return proto.CompactTextString(m) }
func (*TxRes) ProtoMessage()    {}
func (*TxRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{16}
}
func (m *TxRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TxRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxRes.Merge(dst, src)
}
func (m *TxRes) XXX_Size() int {
	return m.Size()
}
func (m *TxRes) XXX_DiscardUnknown() {
	xxx_messageInfo_TxRes.DiscardUnknown(m)
}

var xxx_messageInfo_TxRes proto.InternalMessageInfo

func (m *TxRes) GetTxRaw() *tx.TxRaw {
	if m != nil {
		return m.TxRaw
	}
	return nil
}

func (m *TxRes) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type TxReceiptRes struct {
	// transaction receipt
	TxReceiptRaw         *tx.TxReceiptRaw `protobuf:"bytes,1,opt,name=txReceiptRaw" json:"txReceiptRaw,omitempty"`
	Hash                 []byte           `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TxReceiptRes) Reset()         { *m = TxReceiptRes{} }
func (m *TxReceiptRes) String() string { return proto.CompactTextString(m) }
func (*TxReceiptRes) ProtoMessage()    {}
func (*TxReceiptRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{17}
}
func (m *TxReceiptRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxReceiptRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxReceiptRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TxReceiptRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxReceiptRes.Merge(dst, src)
}
func (m *TxReceiptRes) XXX_Size() int {
	return m.Size()
}
func (m *TxReceiptRes) XXX_DiscardUnknown() {
	xxx_messageInfo_TxReceiptRes.DiscardUnknown(m)
}

var xxx_messageInfo_TxReceiptRes proto.InternalMessageInfo

func (m *TxReceiptRes) GetTxReceiptRaw() *tx.TxReceiptRaw {
	if m != nil {
		return m.TxReceiptRaw
	}
	return nil
}

func (m *TxReceiptRes) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type BlockInfo struct {
	// BlockHead
	Head *block.BlockHead `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
	// block hash
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// transaction list,works when complete is true
	Txs []*tx.TxRaw `protobuf:"bytes,3,rep,name=txs" json:"txs,omitempty"`
	// transaction hash list,works when complete is false
	Txhash [][]byte `protobuf:"bytes,4,rep,name=txhash" json:"txhash,omitempty"`
	// transaction receipt list
	Receipts []*tx.TxReceiptRaw `protobuf:"bytes,5,rep,name=receipts" json:"receipts,omitempty"`
	// transaction receiptHash list
	ReceiptHash          [][]byte `protobuf:"bytes,6,rep,name=receiptHash" json:"receiptHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockInfo) Reset()         { *m = BlockInfo{} }
func (m *BlockInfo) String() string { return proto.CompactTextString(m) }
func (*BlockInfo) ProtoMessage()    {}
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{18}
}
func (m *BlockInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockInfo.Merge(dst, src)
}
func (m *BlockInfo) XXX_Size() int {
	return m.Size()
}
func (m *BlockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BlockInfo proto.InternalMessageInfo

func (m *BlockInfo) GetHead() *block.BlockHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *BlockInfo) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockInfo) GetTxs() []*tx.TxRaw {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *BlockInfo) GetTxhash() [][]byte {
	if m != nil {
		return m.Txhash
	}
	return nil
}

func (m *BlockInfo) GetReceipts() []*tx.TxReceiptRaw {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *BlockInfo) GetReceiptHash() [][]byte {
	if m != nil {
		return m.ReceiptHash
	}
	return nil
}

type SubscribeRes struct {
	// event
	Ev                   *event.Event `protobuf:"bytes,1,opt,name=ev" json:"ev,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SubscribeRes) Reset()         { *m = SubscribeRes{} }
func (m *SubscribeRes) String() string { return proto.CompactTextString(m) }
func (*SubscribeRes) ProtoMessage()    {}
func (*SubscribeRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_db83490addc85ee4, []int{19}
}
func (m *SubscribeRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubscribeRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRes.Merge(dst, src)
}
func (m *SubscribeRes) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRes.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRes proto.InternalMessageInfo

func (m *SubscribeRes) GetEv() *event.Event {
	if m != nil {
		return m.Ev
	}
	return nil
}

func init() {
	proto.RegisterType((*HashReq)(nil), "rpc.HashReq")
	proto.RegisterType((*BlockByHashReq)(nil), "rpc.BlockByHashReq")
	proto.RegisterType((*BlockByNumReq)(nil), "rpc.BlockByNumReq")
	proto.RegisterType((*GetBalanceReq)(nil), "rpc.GetBalanceReq")
	proto.RegisterType((*GetStateReq)(nil), "rpc.GetStateReq")
	proto.RegisterType((*GetContractReq)(nil), "rpc.GetContractReq")
	proto.RegisterType((*RawTxReq)(nil), "rpc.RawTxReq")
	proto.RegisterType((*SubscribeReq)(nil), "rpc.SubscribeReq")
	proto.RegisterType((*VersionInfoRes)(nil), "rpc.VersionInfoRes")
	proto.RegisterType((*HeightRes)(nil), "rpc.HeightRes")
	proto.RegisterType((*GetBalanceRes)(nil), "rpc.GetBalanceRes")
	proto.RegisterType((*GetNetIDRes)(nil), "rpc.GetNetIDRes")
	proto.RegisterType((*GetStateRes)(nil), "rpc.GetStateRes")
	proto.RegisterType((*GetContractRes)(nil), "rpc.GetContractRes")
	proto.RegisterType((*SendRawTxRes)(nil), "rpc.SendRawTxRes")
	proto.RegisterType((*GasRes)(nil), "rpc.GasRes")
	proto.RegisterType((*TxRes)(nil), "rpc.txRes")
	proto.RegisterType((*TxReceiptRes)(nil), "rpc.txReceiptRes")
	proto.RegisterType((*BlockInfo)(nil), "rpc.BlockInfo")
	proto.RegisterType((*SubscribeRes)(nil), "rpc.SubscribeRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApisClient is the client API for Apis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApisClient interface {
	// get the version info
	GetVersionInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionInfoRes, error)
	// get the current height of the blockchain
	GetHeight(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*HeightRes, error)
	// get the tx by hash
	GetTxByHash(ctx context.Context, in *HashReq, opts ...grpc.CallOption) (*TxRes, error)
	// get receipt by hash
	GetTxReceiptByHash(ctx context.Context, in *HashReq, opts ...grpc.CallOption) (*TxReceiptRes, error)
	// get receipt by txhash
	GetTxReceiptByTxHash(ctx context.Context, in *HashReq, opts ...grpc.CallOption) (*TxReceiptRes, error)
	// get the block by hash
	GetBlockByHash(ctx context.Context, in *BlockByHashReq, opts ...grpc.CallOption) (*BlockInfo, error)
	// get the block by number
	GetBlockByNum(ctx context.Context, in *BlockByNumReq, opts ...grpc.CallOption) (*BlockInfo, error)
	// get the balance of some account by account ID
	GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceRes, error)
	// get the Net ID
	GetNetID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetNetIDRes, error)
	// get the value of the corresponding key in stateDB
	GetState(ctx context.Context, in *GetStateReq, opts ...grpc.CallOption) (*GetStateRes, error)
	// get contract by cid
	GetContract(ctx context.Context, in *GetContractReq, opts ...grpc.CallOption) (*GetContractRes, error)
	// receive encoded tx
	SendRawTx(ctx context.Context, in *RawTxReq, opts ...grpc.CallOption) (*SendRawTxRes, error)
	// not supported yet
	EstimateGas(ctx context.Context, in *RawTxReq, opts ...grpc.CallOption) (*GasRes, error)
	// subscribe an event
	Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (Apis_SubscribeClient, error)
}

type apisClient struct {
	cc *grpc.ClientConn
}

func NewApisClient(cc *grpc.ClientConn) ApisClient {
	return &apisClient{cc}
}

func (c *apisClient) GetVersionInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionInfoRes, error) {
	out := new(VersionInfoRes)
	err := c.cc.Invoke(ctx, "/rpc.Apis/GetVersionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) GetHeight(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*HeightRes, error) {
	out := new(HeightRes)
	err := c.cc.Invoke(ctx, "/rpc.Apis/GetHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) GetTxByHash(ctx context.Context, in *HashReq, opts ...grpc.CallOption) (*TxRes, error) {
	out := new(TxRes)
	err := c.cc.Invoke(ctx, "/rpc.Apis/GetTxByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) GetTxReceiptByHash(ctx context.Context, in *HashReq, opts ...grpc.CallOption) (*TxReceiptRes, error) {
	out := new(TxReceiptRes)
	err := c.cc.Invoke(ctx, "/rpc.Apis/GetTxReceiptByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) GetTxReceiptByTxHash(ctx context.Context, in *HashReq, opts ...grpc.CallOption) (*TxReceiptRes, error) {
	out := new(TxReceiptRes)
	err := c.cc.Invoke(ctx, "/rpc.Apis/GetTxReceiptByTxHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) GetBlockByHash(ctx context.Context, in *BlockByHashReq, opts ...grpc.CallOption) (*BlockInfo, error) {
	out := new(BlockInfo)
	err := c.cc.Invoke(ctx, "/rpc.Apis/GetBlockByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) GetBlockByNum(ctx context.Context, in *BlockByNumReq, opts ...grpc.CallOption) (*BlockInfo, error) {
	out := new(BlockInfo)
	err := c.cc.Invoke(ctx, "/rpc.Apis/getBlockByNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceRes, error) {
	out := new(GetBalanceRes)
	err := c.cc.Invoke(ctx, "/rpc.Apis/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) GetNetID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetNetIDRes, error) {
	out := new(GetNetIDRes)
	err := c.cc.Invoke(ctx, "/rpc.Apis/GetNetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) GetState(ctx context.Context, in *GetStateReq, opts ...grpc.CallOption) (*GetStateRes, error) {
	out := new(GetStateRes)
	err := c.cc.Invoke(ctx, "/rpc.Apis/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) GetContract(ctx context.Context, in *GetContractReq, opts ...grpc.CallOption) (*GetContractRes, error) {
	out := new(GetContractRes)
	err := c.cc.Invoke(ctx, "/rpc.Apis/GetContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) SendRawTx(ctx context.Context, in *RawTxReq, opts ...grpc.CallOption) (*SendRawTxRes, error) {
	out := new(SendRawTxRes)
	err := c.cc.Invoke(ctx, "/rpc.Apis/SendRawTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) EstimateGas(ctx context.Context, in *RawTxReq, opts ...grpc.CallOption) (*GasRes, error) {
	out := new(GasRes)
	err := c.cc.Invoke(ctx, "/rpc.Apis/EstimateGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (Apis_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Apis_serviceDesc.Streams[0], "/rpc.Apis/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &apisSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Apis_SubscribeClient interface {
	Recv() (*SubscribeRes, error)
	grpc.ClientStream
}

type apisSubscribeClient struct {
	grpc.ClientStream
}

func (x *apisSubscribeClient) Recv() (*SubscribeRes, error) {
	m := new(SubscribeRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApisServer is the server API for Apis service.
type ApisServer interface {
	// get the version info
	GetVersionInfo(context.Context, *empty.Empty) (*VersionInfoRes, error)
	// get the current height of the blockchain
	GetHeight(context.Context, *empty.Empty) (*HeightRes, error)
	// get the tx by hash
	GetTxByHash(context.Context, *HashReq) (*TxRes, error)
	// get receipt by hash
	GetTxReceiptByHash(context.Context, *HashReq) (*TxReceiptRes, error)
	// get receipt by txhash
	GetTxReceiptByTxHash(context.Context, *HashReq) (*TxReceiptRes, error)
	// get the block by hash
	GetBlockByHash(context.Context, *BlockByHashReq) (*BlockInfo, error)
	// get the block by number
	GetBlockByNum(context.Context, *BlockByNumReq) (*BlockInfo, error)
	// get the balance of some account by account ID
	GetBalance(context.Context, *GetBalanceReq) (*GetBalanceRes, error)
	// get the Net ID
	GetNetID(context.Context, *empty.Empty) (*GetNetIDRes, error)
	// get the value of the corresponding key in stateDB
	GetState(context.Context, *GetStateReq) (*GetStateRes, error)
	// get contract by cid
	GetContract(context.Context, *GetContractReq) (*GetContractRes, error)
	// receive encoded tx
	SendRawTx(context.Context, *RawTxReq) (*SendRawTxRes, error)
	// not supported yet
	EstimateGas(context.Context, *RawTxReq) (*GasRes, error)
	// subscribe an event
	Subscribe(*SubscribeReq, Apis_SubscribeServer) error
}

func RegisterApisServer(s *grpc.Server, srv ApisServer) {
	s.RegisterService(&_Apis_serviceDesc, srv)
}

func _Apis_GetVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).GetVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/GetVersionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).GetVersionInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_GetHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).GetHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/GetHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).GetHeight(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_GetTxByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).GetTxByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/GetTxByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).GetTxByHash(ctx, req.(*HashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_GetTxReceiptByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).GetTxReceiptByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/GetTxReceiptByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).GetTxReceiptByHash(ctx, req.(*HashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_GetTxReceiptByTxHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).GetTxReceiptByTxHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/GetTxReceiptByTxHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).GetTxReceiptByTxHash(ctx, req.(*HashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockByHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/GetBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).GetBlockByHash(ctx, req.(*BlockByHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_GetBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockByNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).GetBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/GetBlockByNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).GetBlockByNum(ctx, req.(*BlockByNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).GetBalance(ctx, req.(*GetBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_GetNetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).GetNetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/GetNetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).GetNetID(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).GetState(ctx, req.(*GetStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_GetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).GetContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/GetContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).GetContract(ctx, req.(*GetContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_SendRawTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawTxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).SendRawTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/SendRawTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).SendRawTx(ctx, req.(*RawTxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_EstimateGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawTxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).EstimateGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/EstimateGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).EstimateGas(ctx, req.(*RawTxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApisServer).Subscribe(m, &apisSubscribeServer{stream})
}

type Apis_SubscribeServer interface {
	Send(*SubscribeRes) error
	grpc.ServerStream
}

type apisSubscribeServer struct {
	grpc.ServerStream
}

func (x *apisSubscribeServer) Send(m *SubscribeRes) error {
	return x.ServerStream.SendMsg(m)
}

var _Apis_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Apis",
	HandlerType: (*ApisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersionInfo",
			Handler:    _Apis_GetVersionInfo_Handler,
		},
		{
			MethodName: "GetHeight",
			Handler:    _Apis_GetHeight_Handler,
		},
		{
			MethodName: "GetTxByHash",
			Handler:    _Apis_GetTxByHash_Handler,
		},
		{
			MethodName: "GetTxReceiptByHash",
			Handler:    _Apis_GetTxReceiptByHash_Handler,
		},
		{
			MethodName: "GetTxReceiptByTxHash",
			Handler:    _Apis_GetTxReceiptByTxHash_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _Apis_GetBlockByHash_Handler,
		},
		{
			MethodName: "getBlockByNum",
			Handler:    _Apis_GetBlockByNum_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Apis_GetBalance_Handler,
		},
		{
			MethodName: "GetNetID",
			Handler:    _Apis_GetNetID_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _Apis_GetState_Handler,
		},
		{
			MethodName: "GetContract",
			Handler:    _Apis_GetContract_Handler,
		},
		{
			MethodName: "SendRawTx",
			Handler:    _Apis_SendRawTx_Handler,
		},
		{
			MethodName: "EstimateGas",
			Handler:    _Apis_EstimateGas_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Apis_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/apis.proto",
}

func (m *HashReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockByHashReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockByHashReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Complete {
		dAtA[i] = 0x10
		i++
		if m.Complete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockByNumReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockByNumReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApis(dAtA, i, uint64(m.Num))
	}
	if m.Complete {
		dAtA[i] = 0x10
		i++
		if m.Complete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetBalanceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBalanceReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.UseLongestChain {
		dAtA[i] = 0x10
		i++
		if m.UseLongestChain {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetStateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Field) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.Field)))
		i += copy(dAtA[i:], m.Field)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetContractReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContractReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RawTxReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawTxReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SubscribeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Topics) > 0 {
		dAtA2 := make([]byte, len(m.Topics)*10)
		var j1 int
		for _, num := range m.Topics {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VersionInfoRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionInfoRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BuildTime) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.BuildTime)))
		i += copy(dAtA[i:], m.BuildTime)
	}
	if len(m.GitHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.GitHash)))
		i += copy(dAtA[i:], m.GitHash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HeightRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeightRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApis(dAtA, i, uint64(m.Height))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetBalanceRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBalanceRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Balance != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApis(dAtA, i, uint64(m.Balance))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetNetIDRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNetIDRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetStateRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStateRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetContractRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContractRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(m.Value.Size()))
		n3, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SendRawTxRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendRawTxRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GasRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gas != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApis(dAtA, i, uint64(m.Gas))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TxRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TxRaw != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(m.TxRaw.Size()))
		n4, err := m.TxRaw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TxReceiptRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxReceiptRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TxReceiptRaw != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(m.TxReceiptRaw.Size()))
		n5, err := m.TxReceiptRaw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Head != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(m.Head.Size()))
		n6, err := m.Head.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if len(m.Txs) > 0 {
		for _, msg := range m.Txs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApis(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Txhash) > 0 {
		for _, b := range m.Txhash {
			dAtA[i] = 0x22
			i++
			i = encodeVarintApis(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Receipts) > 0 {
		for _, msg := range m.Receipts {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintApis(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ReceiptHash) > 0 {
		for _, b := range m.ReceiptHash {
			dAtA[i] = 0x32
			i++
			i = encodeVarintApis(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SubscribeRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ev != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(m.Ev.Size()))
		n7, err := m.Ev.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApis(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HashReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockByHashReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.Complete {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockByNumReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovApis(uint64(m.Num))
	}
	if m.Complete {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBalanceReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.UseLongestChain {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetContractReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RawTxReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubscribeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topics) > 0 {
		l = 0
		for _, e := range m.Topics {
			l += sovApis(uint64(e))
		}
		n += 1 + sovApis(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VersionInfoRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BuildTime)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	l = len(m.GitHash)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HeightRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovApis(uint64(m.Height))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBalanceRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Balance != 0 {
		n += 1 + sovApis(uint64(m.Balance))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNetIDRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStateRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetContractRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendRawTxRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GasRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gas != 0 {
		n += 1 + sovApis(uint64(m.Gas))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TxRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxRaw != nil {
		l = m.TxRaw.Size()
		n += 1 + l + sovApis(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TxReceiptRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxReceiptRaw != nil {
		l = m.TxReceiptRaw.Size()
		n += 1 + l + sovApis(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApis(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovApis(uint64(l))
		}
	}
	if len(m.Txhash) > 0 {
		for _, b := range m.Txhash {
			l = len(b)
			n += 1 + l + sovApis(uint64(l))
		}
	}
	if len(m.Receipts) > 0 {
		for _, e := range m.Receipts {
			l = e.Size()
			n += 1 + l + sovApis(uint64(l))
		}
	}
	if len(m.ReceiptHash) > 0 {
		for _, b := range m.ReceiptHash {
			l = len(b)
			n += 1 + l + sovApis(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubscribeRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ev != nil {
		l = m.Ev.Size()
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApis(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApis(x uint64) (n int) {
	return sovApis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HashReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockByHashReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockByHashReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockByHashReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Complete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockByNumReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockByNumReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockByNumReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Complete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBalanceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBalanceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBalanceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseLongestChain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseLongestChain = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContractReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContractReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContractReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawTxReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawTxReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawTxReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v event.Event_Topic
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (event.Event_Topic(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Topics = append(m.Topics, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApis
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Topics) == 0 {
					m.Topics = make([]event.Event_Topic, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v event.Event_Topic
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (event.Event_Topic(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Topics = append(m.Topics, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionInfoRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionInfoRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionInfoRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GitHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeightRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeightRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeightRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBalanceRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBalanceRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBalanceRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNetIDRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNetIDRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNetIDRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStateRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStateRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStateRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContractRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContractRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContractRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &contract.Contract{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendRawTxRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendRawTxRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendRawTxRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gas", wireType)
			}
			m.Gas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gas |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: txRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: txRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxRaw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxRaw == nil {
				m.TxRaw = &tx.TxRaw{}
			}
			if err := m.TxRaw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxReceiptRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: txReceiptRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: txReceiptRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxReceiptRaw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxReceiptRaw == nil {
				m.TxReceiptRaw = &tx.TxReceiptRaw{}
			}
			if err := m.TxReceiptRaw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &block.BlockHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &tx.TxRaw{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txhash = append(m.Txhash, make([]byte, postIndex-iNdEx))
			copy(m.Txhash[len(m.Txhash)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipts = append(m.Receipts, &tx.TxReceiptRaw{})
			if err := m.Receipts[len(m.Receipts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptHash = append(m.ReceiptHash, make([]byte, postIndex-iNdEx))
			copy(m.ReceiptHash[len(m.ReceiptHash)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ev", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ev == nil {
				m.Ev = &event.Event{}
			}
			if err := m.Ev.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApis
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApis
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApis(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApis = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApis   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rpc/apis.proto", fileDescriptor_apis_db83490addc85ee4) }

var fileDescriptor_apis_db83490addc85ee4 = []byte{
	// 1097 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x51, 0x6f, 0x1b, 0x45,
	0x10, 0xc7, 0xb1, 0x9d, 0xa6, 0xb9, 0xb1, 0xe3, 0x24, 0xdb, 0xb4, 0x58, 0x97, 0xd4, 0x75, 0x37,
	0x91, 0x70, 0xa3, 0xf6, 0x0e, 0x02, 0x08, 0x29, 0xa2, 0x12, 0xa4, 0x8e, 0x1c, 0x23, 0x94, 0x87,
	0x8b, 0x55, 0x81, 0x04, 0x52, 0xd7, 0xe7, 0x8d, 0x7d, 0x8a, 0x7d, 0x67, 0xbc, 0xeb, 0xd4, 0x91,
	0x95, 0x17, 0x1e, 0xf8, 0x02, 0xbc, 0xf0, 0x91, 0x10, 0x4f, 0x48, 0x7c, 0x01, 0x14, 0xf8, 0x20,
	0x68, 0x67, 0xf7, 0x2e, 0x77, 0x8e, 0x5b, 0x85, 0x97, 0xd3, 0xce, 0xec, 0xfe, 0x7f, 0xbb, 0x3b,
	0x33, 0x37, 0x0b, 0xe5, 0xf1, 0xc8, 0x77, 0xd9, 0x28, 0x10, 0xce, 0x68, 0x1c, 0xc9, 0x88, 0x14,
	0xc6, 0x23, 0xdf, 0xfe, 0xa4, 0x17, 0xc8, 0xfe, 0xa4, 0xe3, 0xf8, 0xd1, 0xd0, 0x0d, 0x22, 0x21,
	0x5f, 0x44, 0x67, 0x67, 0x81, 0x1f, 0xb0, 0x81, 0xdb, 0x8b, 0x5e, 0x28, 0x87, 0xeb, 0x47, 0x63,
	0xee, 0xca, 0xa9, 0x2b, 0xa7, 0x5a, 0x67, 0xbf, 0xbc, 0x9b, 0xc4, 0x8f, 0x42, 0x39, 0x66, 0xbe,
	0x4c, 0x06, 0x46, 0xfe, 0xc5, 0xdd, 0xe4, 0x9d, 0x41, 0xe4, 0x9f, 0xeb, 0xef, 0xff, 0x13, 0xf2,
	0x0b, 0x1e, 0x4a, 0xfd, 0x35, 0xc2, 0xed, 0x5e, 0x14, 0xf5, 0x06, 0x5c, 0xdd, 0xdd, 0x65, 0x61,
	0x18, 0x49, 0x26, 0x83, 0x28, 0x34, 0x61, 0xb0, 0xb7, 0xcc, 0x2c, 0x5a, 0x9d, 0xc9, 0x99, 0x7b,
	0x34, 0x1c, 0xc9, 0x4b, 0x3d, 0x49, 0x1f, 0xc3, 0xfd, 0x63, 0x26, 0xfa, 0x1e, 0xff, 0x89, 0x10,
	0x58, 0xea, 0x33, 0xd1, 0xaf, 0xe4, 0x6a, 0xb9, 0xba, 0xe5, 0xe1, 0x98, 0x7e, 0x05, 0xe5, 0x43,
	0x75, 0xc2, 0xc3, 0xcb, 0xf7, 0xac, 0x22, 0x36, 0xac, 0xf8, 0xd1, 0x70, 0x34, 0xe0, 0x92, 0x57,
	0xf2, 0xb5, 0x5c, 0x7d, 0xc5, 0x4b, 0x6c, 0xfa, 0x12, 0x56, 0x0d, 0xe1, 0x64, 0x32, 0x54, 0x80,
	0x75, 0x28, 0x84, 0x93, 0x21, 0xea, 0x0b, 0x9e, 0x1a, 0xbe, 0x57, 0xde, 0x82, 0xd5, 0x26, 0x97,
	0x87, 0x6c, 0xc0, 0x42, 0x9f, 0x2b, 0x79, 0x19, 0xf2, 0xad, 0x86, 0xd9, 0x3d, 0xdf, 0x6a, 0x90,
	0x3a, 0xac, 0x4d, 0x04, 0xff, 0x36, 0x0a, 0x7b, 0x5c, 0xc8, 0x57, 0x7d, 0x16, 0x84, 0x86, 0x31,
	0xef, 0xa6, 0x9f, 0x43, 0xb1, 0xc9, 0xe5, 0xa9, 0x64, 0x92, 0x9b, 0x73, 0x9c, 0xf3, 0x4b, 0x43,
	0x52, 0x43, 0xb2, 0x09, 0xf7, 0xce, 0x02, 0x3e, 0xe8, 0x22, 0xc0, 0xf2, 0xb4, 0x41, 0x29, 0x94,
	0x9b, 0x5c, 0xbe, 0x32, 0x39, 0x5e, 0xa8, 0xa4, 0x55, 0x58, 0xf1, 0xd8, 0xdb, 0xf6, 0xd4, 0x04,
	0xa8, 0xcb, 0x24, 0xc3, 0xe9, 0x92, 0x87, 0x63, 0x7a, 0x00, 0xa5, 0xd3, 0x49, 0x47, 0xf8, 0xe3,
	0xa0, 0x83, 0x7b, 0xef, 0xc1, 0xb2, 0x8c, 0x46, 0x81, 0x2f, 0x2a, 0xb9, 0x5a, 0xa1, 0x5e, 0xde,
	0x27, 0x8e, 0x4e, 0xe7, 0x11, 0x7e, 0xdb, 0x6a, 0xca, 0x33, 0x2b, 0xe8, 0x31, 0x94, 0x5f, 0xf3,
	0xb1, 0x08, 0xa2, 0xb0, 0x15, 0x9e, 0x45, 0x1e, 0x17, 0x64, 0x1b, 0xac, 0xce, 0x24, 0x18, 0x74,
	0xdb, 0xc1, 0x90, 0x9b, 0x53, 0xdc, 0x38, 0x48, 0x05, 0xee, 0xf7, 0x02, 0xa9, 0xd2, 0x65, 0xee,
	0x11, 0x9b, 0x74, 0x07, 0xac, 0x63, 0x1e, 0xf4, 0xfa, 0x52, 0x41, 0x1e, 0xc1, 0x72, 0x1f, 0x0d,
	0x93, 0x09, 0x63, 0xd1, 0x67, 0xd9, 0x80, 0x0b, 0xc5, 0xeb, 0x68, 0xcb, 0xac, 0x8c, 0x4d, 0xfa,
	0x18, 0x03, 0x7a, 0xc2, 0x65, 0xab, 0xa1, 0x16, 0xce, 0x65, 0x86, 0xee, 0xa4, 0xe3, 0x2d, 0x54,
	0x74, 0x2f, 0xd8, 0x60, 0x12, 0x9f, 0x58, 0x1b, 0xf4, 0x60, 0x2e, 0xba, 0x82, 0xd4, 0xd3, 0xeb,
	0x8a, 0xfb, 0xc4, 0x49, 0x7e, 0xaf, 0x64, 0x95, 0xd1, 0x52, 0x28, 0x9d, 0xf2, 0xb0, 0x6b, 0x22,
	0x2f, 0x16, 0x16, 0xb0, 0x0d, 0xcb, 0x4d, 0x26, 0xd4, 0xec, 0x3a, 0x14, 0x7a, 0x4c, 0xe0, 0xe4,
	0x92, 0xa7, 0x86, 0xf4, 0x4b, 0xb8, 0x27, 0x51, 0xf8, 0x04, 0x07, 0xec, 0xad, 0xd9, 0xd2, 0x72,
	0xe4, 0xd4, 0x69, 0x2b, 0x87, 0xa7, 0xfd, 0x09, 0x39, 0xaf, 0x73, 0x8a, 0xe4, 0xef, 0xa0, 0xa4,
	0xd4, 0x3e, 0x0f, 0x46, 0x78, 0xee, 0xcf, 0xd2, 0x76, 0xc2, 0x5a, 0x37, 0xac, 0xc4, 0xef, 0x65,
	0x56, 0x2d, 0x24, 0xff, 0x91, 0x03, 0x0b, 0xff, 0x19, 0x95, 0x70, 0xb2, 0x0b, 0x4b, 0x7d, 0xce,
	0xba, 0x09, 0x4f, 0x77, 0x0c, 0x9c, 0x3f, 0xe6, 0xac, 0xeb, 0xe1, 0xec, 0x22, 0x0e, 0xd9, 0x82,
	0x82, 0x9c, 0x8a, 0x4a, 0xa1, 0x56, 0xc8, 0x5e, 0x4a, 0x79, 0x55, 0xfe, 0xe5, 0x14, 0x25, 0x4b,
	0xb5, 0x42, 0xbd, 0xe4, 0x19, 0x8b, 0x3c, 0x87, 0x95, 0xb1, 0x3e, 0x9e, 0xa8, 0xdc, 0x43, 0xe5,
	0xed, 0x2b, 0x24, 0x2b, 0x48, 0x0d, 0x8a, 0x66, 0x8c, 0x05, 0xb7, 0x8c, 0xa8, 0xb4, 0x8b, 0x3e,
	0xcf, 0x94, 0xbe, 0x2a, 0xde, 0x3c, 0xbf, 0x30, 0x97, 0x29, 0xa5, 0xcb, 0xde, 0xcb, 0xf3, 0x8b,
	0xfd, 0x5f, 0x2c, 0x58, 0xfa, 0x7a, 0x14, 0x08, 0xf2, 0x1a, 0xeb, 0x22, 0x55, 0xf8, 0xe4, 0x91,
	0xa3, 0xfb, 0x98, 0x13, 0xf7, 0x31, 0x07, 0xfb, 0x98, 0xfd, 0xc0, 0x19, 0x8f, 0x7c, 0x27, 0xfb,
	0x8b, 0xd0, 0x0f, 0x7f, 0xfe, 0xeb, 0xdf, 0x5f, 0xf3, 0x1b, 0x64, 0xcd, 0xed, 0x65, 0x29, 0x4d,
	0xb0, 0x9a, 0x5c, 0xea, 0xdf, 0xe0, 0x9d, 0xc8, 0x32, 0x22, 0x93, 0x7f, 0x85, 0x12, 0xa4, 0x95,
	0x08, 0x28, 0x9a, 0xd1, 0x36, 0xb0, 0xba, 0xdb, 0x53, 0xdd, 0x19, 0x49, 0x49, 0x4b, 0x74, 0x93,
	0xb4, 0x01, 0x2d, 0x2c, 0x2e, 0xba, 0x85, 0xe2, 0x87, 0xe4, 0x81, 0x12, 0xc7, 0xeb, 0xdd, 0x99,
	0x0a, 0xf6, 0x15, 0xf9, 0x1e, 0x08, 0x52, 0x4c, 0x70, 0x17, 0xc2, 0x36, 0x12, 0x58, 0x5c, 0x6b,
	0x94, 0x22, 0x73, 0x9b, 0xd8, 0x9a, 0x99, 0x51, 0xc7, 0xe8, 0x1f, 0x61, 0x33, 0x8b, 0x6e, 0x4f,
	0xef, 0x06, 0xdf, 0x45, 0x78, 0x95, 0x6c, 0xcf, 0xc1, 0xb5, 0x3e, 0xc6, 0xbf, 0xc1, 0x04, 0xa5,
	0x1e, 0x07, 0xa2, 0x13, 0x91, 0x7d, 0x2e, 0x4c, 0x28, 0x93, 0x6a, 0xa6, 0xcf, 0x10, 0xbe, 0x43,
	0x9e, 0x2a, 0x78, 0x6a, 0xad, 0xc1, 0xba, 0xb3, 0xb8, 0xf3, 0x5f, 0x91, 0x1f, 0x60, 0xf5, 0x66,
	0xcd, 0xc9, 0x64, 0x48, 0x48, 0x7a, 0x03, 0xfd, 0x9a, 0xdc, 0xe2, 0x7f, 0x84, 0xfc, 0xa7, 0xe4,
	0x89, 0x9b, 0xd1, 0xba, 0xb3, 0x70, 0x32, 0xcc, 0xd0, 0xdf, 0x00, 0xdc, 0xf4, 0x39, 0x83, 0xce,
	0xbc, 0x34, 0xf6, 0x6d, 0x9f, 0xa0, 0x7b, 0x88, 0xdf, 0x25, 0x14, 0xf1, 0xda, 0xef, 0xce, 0x5a,
	0x8d, 0x2b, 0x77, 0x36, 0xf7, 0xdc, 0x5c, 0x91, 0x26, 0xac, 0xc4, 0xed, 0xf1, 0x9d, 0x95, 0xb6,
	0x1e, 0xef, 0x11, 0x77, 0x51, 0xba, 0x81, 0x3b, 0x14, 0x89, 0xa5, 0x76, 0xd0, 0x62, 0x0d, 0xc2,
	0x46, 0x4a, 0x12, 0x41, 0xfc, 0x8e, 0xd9, 0xf3, 0x9e, 0xb9, 0xe2, 0x47, 0xaf, 0x3b, 0x3b, 0xe7,
	0x97, 0x57, 0xe4, 0x14, 0x6b, 0x36, 0x6e, 0xa3, 0x26, 0x61, 0xd9, 0xc7, 0xcd, 0x5e, 0xe0, 0x14,
	0xd4, 0x46, 0xe2, 0x26, 0x21, 0x8a, 0x18, 0x4f, 0x18, 0x68, 0x03, 0xac, 0xa4, 0x0b, 0x93, 0x55,
	0x54, 0xc7, 0x6f, 0xa1, 0xa9, 0xae, 0x74, 0x93, 0xa6, 0x0f, 0x11, 0xb5, 0x46, 0xc1, 0x15, 0xb1,
	0xfb, 0x20, 0xb7, 0x47, 0x0e, 0xa1, 0x78, 0x24, 0x64, 0x30, 0x64, 0x92, 0x37, 0x99, 0x98, 0xe7,
	0x14, 0xf5, 0xa1, 0xb0, 0x91, 0xc7, 0xd7, 0xa3, 0x25, 0x97, 0xdf, 0x28, 0x14, 0xe3, 0x1b, 0xb0,
	0x92, 0x56, 0x43, 0xcc, 0xd6, 0xa9, 0x57, 0xd7, 0xbe, 0xe5, 0xca, 0x9c, 0x26, 0x76, 0x1f, 0xe4,
	0xf6, 0x3e, 0xce, 0x1d, 0xae, 0xff, 0x7e, 0x5d, 0xcd, 0xfd, 0x79, 0x5d, 0xcd, 0xfd, 0x7d, 0x5d,
	0xcd, 0xfd, 0xf6, 0x4f, 0xf5, 0x83, 0xce, 0x32, 0xa6, 0xee, 0xd3, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x07, 0x8a, 0x1b, 0x12, 0x66, 0x0a, 0x00, 0x00,
}
